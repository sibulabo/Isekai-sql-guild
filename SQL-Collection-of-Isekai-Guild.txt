-- Name: SQL-Collection-of-Isekai-Guild
-- 本書に掲載されたSQL文集です。
-- LiveSQLなど実行環境でコピー＆ペーストしてご利用ください。

-----------------
--        2章    --
-----------------
-- 2-1
--魔物の書を作成するDDL文 （魔物タイプの書への外部キー定義含む）
CREATE TABLE 魔物の書 (
    魔物ID INT PRIMARY KEY,        -- 魔物を一意に識別するID
    名前 VARCHAR(50) NOT NULL,     -- 魔物の名前
    攻撃力 INT NOT NULL,           -- 魔物の攻撃力
    防御力 INT NOT NULL,           -- 魔物の防御力
    最大HP INT NOT NULL,           -- 魔物の最大HP
    最大MP INT NOT NULL,           -- 魔物の最大MP
    魔物タイプID INT,              -- 魔物のタイプ（外部キー）
    登録日 DATE,
    FOREIGN KEY (魔物タイプID) REFERENCES 魔物タイプの書(魔物タイプID)
);


-----------------
--        3章    --
-----------------
-- 3-1
SELECT NAME FROM 魔物の書 WHERE 魔物ID = 1

-- 3-2
-- 文字、日付の条件は、両端のシングルクォーテーションを付与する
-- 魔物の名前が『ゴブリン』の魔物を検索する場合
SELECt * FROM 魔物の書 WHERE 名前 = 'ゴブリン';
-- 討伐日付が『2024-01-15』の記録を検索する場合
SELECT * FROM 討伐実績の書 WHERE 討伐日付 = '2024-01-15';

-- 3-3
-- 魔物IDが1の魔物情報を問い合わせる。
SELECT 魔物ID,  名前, 攻撃力
   FROM 魔物の書
 WHERE 魔物ID = 1;

-- 3-4
-- 任意の位置で開業が可能
SELECT↓
魔物ID↓
,↓
名前,↓
攻撃力↓
FROM↓
魔物の書;↓

-- 3-5
-- 先頭や途中に空白入力が可能
SELECT
   id,
   名前,
   攻撃力
  FROM 魔物の書
 WHERE id = 1;

-- 3-6
-- SQL呪文の文末を明示（;）
SELECT 名前 FROM 魔物の書;

-- 3-7
-- 複数のUPDATE文を一括実行する際は、文末のセミコロンは必須
UPDATE 魔物の書 SET 魔物タイプid = 2 WHERE 名前 = 'ゴブリン';
 UPDATE 魔物の書 SET 魔物タイプid = 2 WHERE 名前 = '赤ゴブリン';
 UPDATE 魔物の書 SET 魔物タイプid = 2 WHERE 名前 = '青ゴブリン';

-- 3-8
-- 最終行の文末のセミコロンは、あってもなくても問題なし
UPDATE 魔物の書 SET 魔物タイプid = 2 WHERE 名前 = 'ゴブリン';
UPDATE 魔物の書 SET 魔物タイプid = 2 WHERE 名前 = '赤ゴブリン';
UPDATE 魔物の書 SET 魔物タイプid = 2 WHERE 名前 = '青ゴブリン'

-- 3-9
-- コメントを記入する①
-- 魔物タイプが"1:獣人"の魔物情報を検索
SELECT * FROM 魔物の書 WHERE 魔物タイプID = 1;

-- 3-10
-- コメントを記入する②
SELECT * FROM 魔物の書
 WHERE 魔物タイプID = 1  -- 魔物タイプが”１：獣人”
   AND 攻撃力 > 100      -- 攻撃力が100越え

-- 3-11
-- 実行しないUPDATE文をコメントする
-- ゴブリンの魔物タイプを2:アンデッドに変更
-- 2025/03/01 青ゴブリンのみ変更することになった。
--UPDATE 魔物の書 SET 魔物タイプid = 2 WHERE 名前 = 'ゴブリン';
--UPDATE 魔物の書 SET 魔物タイプid = 2 WHERE 名前 = '赤ゴブリン';
UPDATE 魔物の書 SET 魔物タイプid = 2 WHERE 名前 = '青ゴブリン';

-- 3-12
-- コメントを末尾に記入する。
SELECT 名前 FROM 魔物の書
 WHERE 魔物タイプID = 1  -- 魔物タイプが”1：獣人”
   AND 攻撃力 > 100      -- 攻撃力が100越え

-- 3-13
-- ブロックコメントを記入する
/* この呪文は、特定の魔物タイプの情報を取得するためのもの。
例えば、魔物タイプID=1は「獣人」に分類される。
ここで取得したデータをもとに、戦闘時の戦略を立てることができる。*/
SELECT * FROM 魔物の書 WHERE 魔物タイプID = 1

-----------------
--        5章    --
-----------------
-- 5-1
-- はじめてのSELECT文
SELECT 名前 FROM 魔物の書;

-- 5-2
-- 全ての列の情報を取り出す
SELECT 魔物ID,名前,攻撃力,防御力,最大HP,最大MP,魔物タイプID,登録日
  FROM 魔物の書;

-- 5-3
-- 全ての列の情報を取り出す（省略形 * を使用）
SELECT *
  FROM 魔物の書;

-- 5-4
-- DISTINCTを使用しない場合
SELECT 魔物タイプID FROM 魔物の書;

-- 5-5
-- DISTINCTを使用した場合
SELECT DISTINCT 魔物タイプID FROM 魔物の書;

-- 5-6
-- DISTINCTを風数列に適用
SELECT
    DISTINCT 職業ID, 性別
  FROM 冒険者の書;

-- 5-7
-- 算術演算子を使用して総合力を求めよ！
SELECT 名前, 攻撃力 + 最大MP
  FROM 魔物の書;

-- 5-8
-- 文字列結合演算子で言葉をつむげ！
SELECT
    名前, 魔物タイプID,
    名前 || '（タイプID：' || 魔物タイプID || '）'
  FROM 魔物の書;

-- 5-9
-- SELECT句の列や式に別名を付ける
SELECT
    攻撃力 + 防御力,             -- ① 別名を使用しない。
    名前 AS 魔物の名前,          -- ②『魔物の名前』という列名に変えて表示。
    攻撃力 + 防御力 AS 総合力,   -- ③『総合力』という列名で表示。
    攻撃力 + 防御力 AS "総合力", -- ④『総合力』という列名で表示。(標準SQL準拠)
    攻撃力 + 防御力 AS "SELECT", -- ⑤ 予約語を別名で表示可能だが基本使用しない。
    攻撃力 + 防御力 総合力       -- ⑥ SELECT句でのASは省略可能
  FROM 魔物の書

-- 5-10
-- 書名に別名を指定しなかった場合　（書名を使用）
SELECT
   魔物の書.名前,
   魔物タイプの書.魔物タイプID,
   魔物タイプの書.魔物タイプ名
  FROM 魔物の書
   LEFT OUTER JOIN 魔物タイプの書
      ON 魔物の書.魔物タイプID = 魔物タイプの書.魔物タイプID;

-- 5-11
-- 式に別名を指定した場合
SELECT
   m.名前,
   mt.魔物タイプID,
   mt.魔物タイプ名
  FROM 魔物の書 m
LEFT OUTER JOIN 魔物タイプの書 mt
        ON m.魔物タイプID = mt.魔物タイプID;

-- 5-12
-- 別名が使用できないケース
SELECT 名前,攻撃力 AS 戦闘力
  FROM 魔物の書
 WHERE 戦闘力 <= 30;

-- 5-13
-- ORDER BY句では、別名がを使用できる
SELECT 名前,攻撃力 AS 戦闘力
  FROM 魔物の書
 ORDER BY 戦闘力;

-- 5-14
-- 魔物を攻撃力が低い順に並べる。
SELECT 名前,攻撃力 FROM 魔物の書
 ORDER BY 攻撃力;

-- 5-15
-- 魔物を攻撃力が高い順に並べる。
SELECT 名前,攻撃力 FROM 魔物の書
 ORDER BY 攻撃力 DESC;

-- 5-16
-- 攻撃力が高い順に並べ、同じ攻撃力の場合は防御力の低い順にソートする。
SELECT 名前,攻撃力 FROM 魔物の書
 ORDER BY 攻撃力 DESC, 防御力 ASC;

-- 5-17
-- ORDER BY句に別名を指定
SELECT 名前, 攻撃力+防御力 AS 総合戦闘力
  FROM 魔物の書
 ORDER BY 総合戦闘力 DESC;

-- 5-18
-- 列番号を使用した並び替え
SELECT 冒険者ID, 名前, レベル FROM 冒険者の書
 ORDER BY 3;

-- 5-19
-- 列番号を使用した並び替え（SELECT *）
SELECT * FROM 冒険者の書
 ORDER BY 5;

-- 5-20
-- ORDER BY句でSELECT句に無い別名を指定
SELECT 名前, 攻撃力 FROM 魔物の書
 ORDER BY 魔物ID;

 -- 問題5-1の回答
SELECT 名前, 攻撃力, 防御力
  FROM 魔物の書
 ORDER BY 攻撃力 DESC, 防御力 ASC;

-- 問題5-2の回答
SELECT
    名前, レベル, 攻撃力 + 防御力 AS 戦闘力
  FROM 冒険者の書
 ORDER BY 戦闘力 ASC;


-----------------
--      6章      --
-----------------
-- 6-1
-- 条件を指定して検索する　（WHERE句）
SELECT ＊ FROM 魔物の書
 WHERE 最大HP <= 30;

-- 6-2
-- 範囲指定して検索する　（BETWEEN演算子）
SELECT ＊ FROM 魔物の書
 WHERE 攻撃力 BETWEEN 7 AND 10;

-- 6-3
-- 日付を範囲指定して検索する　（BETWEEN演算子）
SELECT * FROM 魔物の書
 WHERE 登録日 BETWEEN '1939-01-01' AND '1942-12-31';

-- 6-4
-- 値リストに含まれるものを検索する　
SELECT * FROM 魔物の書
 WHERE 魔物タイプID IN (1, 3, 5);

-- 6-5
-- 値リストに含まれないものを検索する　
SELECT * FROM 魔物の書
 WHERE 魔物タイプID NOT IN (1, 3, 5);

-- 6-6
-- 部分一致検索　（LIKE演算子 %使用）
SELECT * FROM 魔物の書
 WHERE 名前 LIKE '%スライム';

-- 6-7
-- 部分一致検索　（LIKE演算子 _使用）
SELECT * FROM 魔物の書
 WHERE 名前 LIKE '_鬼';

-- 6-8
-- ワイルドカードの組み合わせ
--名前に"ア"が含まれる魔物を検索
SELECT * FROM 魔物の書 WHERE 名前 LIKE '%ア%';
--名前の2文字目に"ア"が含まれる魔物を検索
SELECT * FROM 魔物の書 WHERE 名前 LIKE '_ア%';
--名前が"ス"で始まり"ム"で終わる、文字数が４文字の魔物を検索
SELECT * FROM 魔物の書 WHERE 名前 LIKE 'ス__ム';

-- 6-9
-- 《NOT》+《IN》
SELECT
　　　　名前, 魔物タイプID
   FROM 魔物の書
 WHERE 魔物タイプID NOT IN (1, 2);

-- 6-10
-- 《NOT》＋《BETWEEN》
SELECT
    名前, 攻撃力
  FROM 魔物の書
 WHERE 攻撃力 NOT BETWEEN 10 AND 50;

-- 6-11
-- 《NOT》＋《LIKE》
-- 名前に"スライム"が含まれない魔物情報を検索
SELECT
    名前, 攻撃力
  FROM 魔物の書
 WHERE 名前 NOT LIKE '%スライム%';

-- 6-12
-- レベル10以下の女性冒険者
SELECT * FROM 冒険者の書
 WHERE 性別 = 2 AND レベル <= 10;

-- 6-13
-- レベルが10以下か、性別が女性の冒険者をさがせ
SELECT * FROM 冒険者の書
 WHERE 性別 = 2 OR レベル <= 10;

-- 6-14
-- AND、OR混在時は注意せよ
SELECT * FROM 冒険者の書
 WHERE 性別 = 1   -- 1:男性
     AND 攻撃力 >= 50 OR 最大HP >= 300;

-- 6-15
-- AND、OR混在時は注意せよ　（AND優先）
SELECT * FROM 冒険者の書
 WHERE ( 性別 = 1 AND 攻撃力 >= 50 )
       OR 最大HP >= 300;

-- 6-16
-- AND、OR混在時は注意せよ (優先順位を明示）
SELECT * FROM 冒険者の書
 WHERE 性別 = 1
  　 AND ( 攻撃力 >= 50 OR 最大HP >= 300 );

-- 6-17
-- 魔物タイプが未設定の魔物を探す。
SELECT * FROM 魔物の書
 WHERE 魔物タイプID IS NULL;

-- 6-18
-- 魔物タイプが決まっている魔物を探す。
SELECT * FROM 魔物の書
 WHERE 魔物タイプID IS NOT NULL;

 -- 問題6-1の回答
SELECT 名前, レベル
  FROM 冒険者の書
 WHERE レベル BETWEEN 15 AND 25
 ORDER BY レベル ASC;

-- 問題6-2の回答
SELECT 名前, 魔物タイプID
  FROM 魔物の書
 WHERE 魔物タイプID NOT IN (1, 3, 5)
   AND 名前 LIKE '%ム%';

  -- 問題6-3の回答
  SELECT
　　名前, レベル, 性別, 最大MP
  FROM 冒険者の書
 WHERE レベル >= 30
    OR (性別 = 1 AND 最大MP > 100);


-----------------
--      7章      --
-----------------
-- 7-1
-- "魔物の書”と”魔物タイプの書”をJOIN
SELECT m.名前, mt.魔物タイプ名
  FROM 魔物の書 m
  JOIN 魔物タイプの書 mt ON m.魔物タイプID = mt.魔物タイプID;

-- 7-2
-- 左結合(LEFT JOIN)の”左”とは？　FROM句を1行にすると一目瞭然！
SELECT m.名前, mt.タイプ名
  FROM 魔物の書 m JOIN 魔物タイプの書 mt ON m.魔物タイプID = mt.魔物タイプID;

-- 7-3
-- "魔物の書”と”魔物タイプの書”を　LEFT JOIN
SELECT m.名前, mt.魔物タイプ名
  FROM 魔物の書 m
  LEFT JOIN 魔物タイプの書 mt ON m.魔物タイプID = mt.魔物タイプID;

-- 7-4
-- 冒険者の《名前》と《技名》を表示する。
SELECT
  B.名前, W.技名
FROM 冒険者の書 B
LEFT JOIN 冒険者技の書 BW ON B.冒険者ID = BW.冒険者ID
JOIN 技の書 W ON BW.技ID = W.技ID;

-- 問題7-1の回答
SELECT M.名前, T.魔物タイプ名
  FROM 魔物の書 M
  JOIN 魔物タイプの書 T
       ON M.魔物タイプID = T.魔物タイプID
 ORDER BY T.魔物タイプ名 ASC, M.名前 ASC;

 -- 問題7-2の回答
 SELECT M.名前, T.魔物タイプ名
  FROM 魔物の書 M
  LEFT JOIN 魔物タイプの書 T
       ON M.魔物タイプID = T.魔物タイプID
 ORDER BY T.魔物タイプ名 ASC, M.名前 ASC;

-- 問題7-3の回答
SELECT
    B.名前, W.技名
  FROM 冒険者の書 B
  LEFT JOIN 冒険者技の書 BW ON B.冒険者ID = BW.冒険者ID
  LEFT JOIN 技の書 W ON BW.技ID = W.技ID
ORDER BY 名前, 技名;


-----------------
--      8章      --
-----------------
-- 8-1
-- SQL関数の呼び出し例
SELECT
    UPPER(名前),          -- 引数必要
    COALESCE(最大MP, 0),  -- 引数必要
    CURRENT_DATE          -- 引数不要
FROM 魔物の書;

-- 8-2
-- コードネームに'C'が含まれる冒険者を抽出
SELECT 名前, コードネーム FROM 冒険者の書
 WHERE INSTR(コードネーム, 'C') > 0;

-- 8-3
-- 関数のネストは、内側から外側に向け順に実行される。
SELECT 名前, コードネーム FROM 冒険者の書
 WHERE INSTR( UPPER(コードネーム) , 'C') > 0;

-- 8-4
-- FROM句を省略した書（テーブル）なしの詠唱
-- 大文字変換
SELECT UPPER('abcDe');

-- 8-5
-- Oracleでは、《DUAL表》を使用する。
-- 大文字変換
SELECT UPPER('abcDe') FROM DUAL;

-- 8-6
-- TRIMの使用方法 　① 《文字列》のみ
SELECT TRIM('▯▯GOBLIN▯') FROM DUAL;

-- 8-7
-- TRIMの使用方法 　② 《削除文字》FROM《文字列》
SELECT TRIM('*' FROM '**GOBLIN*') FROM DUAL;

-- 8-8
-- TRIMの使用方法 　③ 《削除位置》FROM《文字列》
SELECT
       TRIM(LEADING  FROM '▯▯GOBLIN▯') AS LEADING,
       TRIM(TRAILING FROM '▯▯GOBLIN▯') AS TRAILING,
       TRIM(BOTH     FROM '▯▯GOBLIN▯') AS BOTH
FROM DUAL;

-- 8-9
-- TRIMの使用方法 　④ 全て指定
SELECT TRIM(BOTH '*' FROM '**GOBLIN*') FROM DUAL;

-- 8-10
-- UPPER, LOWERの使用方法
SELECT
     UPPER('goBLIN'), LOWER('goBLIN')
  FROM DUAL;

-- 8-11
-- SUBSTRINGの詠唱法：　《文字列》 《ｍ：開始位置》を指定
SELECT SUBSTRING('Sunday', 3);
-- SELECT SUBSTR('Sunday', 3) FROM DUAL;  --For Oracle


-- 8-12
-- SUBSTRINGの詠唱法：　すべての引数を指定
SELECT SUBSTRING('Sunday', 3, 2);
-- SELECT SUBSTR('Sunday', 3, 2) FROM DUAL;  --For Oracle

-- 8-13
-- SUBSTRINGの詠唱法：　 《ｍ：開始位置》に負の値を指定
SELECT SUBSTRING('Sunday', -1);
-- SELECT SUBSTR('Sunday', -1) FROM DUAL;  --For Oracle

-- 8-14
-- SUBSTRINGの詠唱法：　 《ｍ：開始位置》に負の値を指定
SELECT SUBSTRING('Sunday', -5, 2);
-- SELECT SUBSTR('Sunday', -5, 2) FROM DUAL;  --For Oracle

-- 8-15
-- 『標準SQL形式』のSUBSTRING関数の使用方法
SELECT
    識別コード,
    SUBSTRING(識別コード FROM 2 FOR 8) AS 生年月日
    -- SUBSTR(識別コード, 2, 8) AS 生年月日  --For Oracle
 FROM 冒険者の書;


-- 8-16
-- LENGTHの使用方法
SELECT LENGTH('GOBLIN') FROM DUAL;

-- 8-17
-- LENGTHの使用方法 - ORDER BY句編
SELECT コードネーム FROM 冒険者の書
 ORDER BY LENGTH(コードネーム)

-- 8-18
-- REPLACEの使用方法
SELECT
    REPLACE('You make me unhappy!', 'un', 'super▯')
  FROM DUAL;

-- 8-19
-- ROUNDの使用方法 　① 《ｎ》を省略
SELECT ROUND(234.56) FROM DUAL;

-- 8-20
-- ROUNDの使用方法 　②  《ｎ》 に 1 を指定
SELECT ROUND(234.56, 1) FROM DUAL;

-- 8-21
-- ROUNDの使用方法 　③  《数値》 に NULL を指定
SELECT ROUND(NULL) FROM DUAL;

-- 8-22
-- CIELの使用方法 　①  《数値》 に正の数を指定
SELECT
    CIEL(12.01),
    CIEL(12.99),
    CIEL(12.00)
  FROM DUAL;

-- 8-23
-- CIELの使用方法 　②  《数値》 に負の数を指定
SELECT
    CIEL(-12.01),
    CIEL(-12.99),
    CIEL(-12.00)
  FROM DUAL;

-- 8-24
-- CIELの使用方法 　③  《数値》 にNULLを指定
SELECT CIEL(NULL) FROM DUAL;

-- 8-25
-- FLOORの使用方法 　①  《数値》 に正の数を指定
SELECT
    FLOOR(12.01),
    FLOOR(12.99),
    FLOOR(12.00)
  FROM DUAL;

-- 8-26
-- FLOORの使用方法 　②  《数値》 に負の数を指定
SELECT
    FLOOR(-12.01),
    FLOOR(-12.99),
    FLOOR(-12.00)
  FROM DUAL;

-- 8-27
-- FLOORの使用方法 　③  《数値》 に NULLを指定
SELECT FLOOR(NULL) FROM DUAL;

-- 8-28
-- MODの使用方法 　①  引数に正の整数を指定
SELECT
    MOD(11, 4),
    MOD(1000, 5),
    MOD(5, 6)
  FROM DUAL;

-- 8-29
-- MODの使用方法 　②  引数に負の整数を指定
SELECT
    MOD(-11, 4),
    MOD(-1000, 5),
    MOD(-5, 6),
    MOD(11, -4),
    MOD(-11, -4)
  FROM DUAL;

-- 8-30
-- MODの使用方法 　③  引数にNULLを指定
SELECT
    MOD(5, NULL),
    MOD(NULL, 5),
    MOD(NULL, NULL)
  FROM DUAL;

-- 8-31
-- ABSの使用方法
SELECT
    ABS(-10),
    ABS(10),
    ABS(0),
    ABS(NULL)
  FROM DUAL;

-- 8-32
-- 日付を扱う関数の使用方法
SELECT
    CURRENT_DATE,
    CURRENT_TIME,
    CURRENT_TIMESTAMP;

-- 8-33
-- INTERVALの基本詠唱例
SELECT
  CURRENT_TIMESTAMP - INTERVAL '1' YEAR -- 現在日時から1年前,
  CURRENT_DATE + INTERVAL '7' DAY;      -- 現在日付から7日後

-- 8-34
-- CAST関数の使用方法
SELECT
    CAST('3' AS INTEGER) + CAST('7' AS INTEGER)
  FROM DUAL;

-- 8-35
-- COALESCE関数の使用方法
SELECT
    COALESCE('A', 'B', 'C'),      -- A
    COALESCE(NULL, 'B', 'C'),     -- B
    COALESCE(NULL, NULL, 'C'),    -- C
    COALESCE('A', NULL, 'C'),     -- A
    COALESCE(NULL, NULL)          -- NULL
  FROM DUAL;

-- 8-36
-- NULLIF関数の使用方法
SELECT
    NULLIF('ABC', 'ABC'), -- NULL
    NULLIF('ABC', 'XYZ')  -- 'ABC'
  FROM DUAL;

-- 8-37
-- 第１引数がNULLだと《オラクル》系統でエラー
SELECT
    NULLIF(NULL, 'ABC') -- ERRORになるRDBあり
  FROM DUAL;

-- 8-38
-- CASTしてデータ型を明示
SELECT
    NULLIF(NULL, 'ABC') -- ERRORになるRDBあり
    NULLIF(CAST(NULL AS VARCHAR2), 1) -- NULL
  FROM DUAL;

-- 8-39
-- 書（テーブル）の列指定では、値がNULLでも問題なし
SELECT
    NULLIF(魔物タイプID, 1) -- どの系統でも問題なし
  FROM 魔物の書;

-- 8-40
-- COUNT関数の使用方法
SELECT
    COUNT(*),           -- NULLを含む全件数
    COUNT(魔物タイプID) -- タイプIDがNULL以外の件数
  FROM 魔物の書;

-- 8-41
-- COUNT関数の使用方法 : DISTINCT/ALLオプション
SELECT
    COUNT(ALL 魔物タイプID),     -- デフォルトなので無指定でも同様
    COUNT(DISTINCT 魔物タイプID) -- 重複値を１つにまとめる
  FROM 魔物の書;

-- 8-42
-- MAX/MIN関数の使用方法
SELECT
    MAX(攻撃力),  -- 最大の攻撃力
    MIN(攻撃力)   -- 最小の攻撃力
  FROM 魔物の書;

-- 8-43
-- MAX/MIN関数の使用方法　その２
SELECT
    MAX(登録日),  -- 最新の登録日
    MIN(登録日)   -- 最古の登録日
  FROM 魔物の書;

-- 8-44
-- SUM/AVG関数の使用方法
SELECT
    SUM(最大MP),  -- 総ＭＰ
    AVG(最大MP)   -- 平均ＭＰ
  FROM 魔物の書;

-- 8-45
-- SUM/AVG関数の使用方法： 最大MP NULL → 0として集計
SELECT
    SUM(COALESCE(最大MP, 0)),  -- 総ＭＰ
    AVG(COALESCE(最大MP, 0))   -- 平均ＭＰ
  FROM 魔物の書;

-- 8-46
-- LISTAGG関数の使用方法：　《式》のみ指定
SELECT
    LISTAGG(名前)
  FROM 冒険者の書
 WHERE 冒険者ID BETWEEN 101 AND 105;

-- 8-47
-- LISTAGG関数の使用方法：　《式》と《区切り文字》を指定
SELECT
    LISTAGG(名前, ','),    -- カンマ区切りで羅列
    LISTAGG(名前, 'と、')  -- 'と、'区切りで羅列
  FROM 冒険者の書
 WHERE 冒険者ID BETWEEN 101 AND 105;

-- 8-48
-- LISTAGG関数の使用方法：　DISTINCT/ALLと《式》と《区切り文字》を指定
SELECT
    LISTAGG(ALL 魔物タイプID, ':'),     -- ALL無しでも同様
    LISTAGG(DISTINCT 魔物タイプID, ':') -- DISTINCT指定
  FROM 魔物の書
 WHERE 魔物ID BETWEEN 1 AND 20;

-- 8-49
-- LISTAGG関数の使用方法：　《式》と《区切り文字》と《WITHIN...》を指定
SELECT
    -- 魔物タイプID昇順にカンマ区切りで羅列
    LISTAGG(DISTINCT 魔物タイプID, ',')
        WITHIN GROUP (ORDER BY 魔物タイプID)
  FROM 魔物の書
 WHERE 魔物ID BETWEEN 1 AND 20;


-- 問題8-1の回答
SELECT コードネーム FROM 冒険者の書
 WHERE LOWER(コードネーム) LIKE '%st%'
-- UPPERを使用した場合
-- WHERE UPPER(コードネーム) LIKE '%ST%'

-- 問題8-2の回答
SELECT
    名前, 最大HP, 最大MP,
    ROUND(最大HP/COALESCE(最大MP, 1)) AS HPMP比率
  FROM 魔物の書
 WHERE 魔物タイプID IN (8, 9)

 -- 問題8-3の回答
 SELECT
    名前, s.種族名,
    CAST(SUBSTR(b.識別コード, 2, 8) AS DATE) AS 誕生日
  FROM 冒険者の書 b
  JOIN 種族の書 s ON SUBSTR(b.識別コード, 10, 2) = s.種族コード
 ORDER BY 誕生日

 -- 問題8-4の回答
 SELECT
    MAX(攻撃力) AS 最大攻撃力,
    AVG(攻撃力) AS 平均攻撃力
  FROM 魔物の書


-----------------
--      9章      --
-----------------
-- 9-1
-- 《魔物タイプ》が亜人（=1）の平均攻撃力を求める。
SELECT
    AVG(攻撃力) AS 亜人の平均攻撃力
  FROM 魔物の書
 WHERE 魔物タイプID = 1  -- 1:亜人

-- 9-2
-- 《魔物タイプ》別に平均攻撃力を求める。
SELECT
    魔物タイプID,
    AVG(攻撃力) AS 平均攻撃力
  FROM 魔物の書
 GROUP BY 魔物タイプID
 ORDER BY 魔物タイプID;

-- 9-3
-- 職業と性別ごとの冒険者数を検索する。
SELECT
    職業ID, 性別,
    COUNT(冒険者ID) AS 冒険者数
  FROM 冒険者の書
 GROUP BY 職業ID, 性別
 ORDER BY 職業ID;

-- 9-4
-- 代わりにWHERE句を指定してエラー発生
SELECT
    魔物タイプID,
    AVG(攻撃力) AS 平均攻撃力
  FROM 魔物の書
 WHERE AVG(攻撃力) >= 25
 GROUP BY 魔物タイプID;

-- 9-5
-- 《魔物タイプ》別に平均攻撃力が25以上のを求める。
SELECT
    魔物タイプID,
    AVG(攻撃力) AS 平均攻撃力
  FROM 魔物の書
 GROUP BY 魔物タイプID
 HAVING AVG(攻撃力) >= 25

-- 9-6
-- HAVING句で複数の条件を指定
SELECT
    魔物タイプID,
    COUNT(*) AS 魔物数,
    AVG(攻撃力) AS 平均攻撃力
  FROM 魔物の書
 GROUP BY 魔物タイプID
HAVING COUNT(*) >= 3 AND AVG(攻撃力) >= 25
 ORDER BY 1;


 -- 問題9-1の回答
SELECT
    魔物タイプID,
    AVG(攻撃力) AS 平均攻撃力
  FROM 魔物の書
 GROUP BY 魔物タイプID
 ORDER BY 魔物タイプID;

 -- 問題9-2の回答
SELECT
    魔物タイプID,
    AVG(防御力) AS 平均防御力
  FROM 魔物の書
 GROUP BY 魔物タイプID
 HAVING AVG(防御力) > 50
 ORDER BY 魔物タイプID;

 -- 問題9-3の回答
SELECT
    M.魔物タイプID,
　　COUNT(TR.魔物ID) AS 合計討伐数,
    AVG(M.最大HP) AS 平均最大HP
  FROM 討伐実績の書 TR
  JOIN 魔物の書 M ON TR.魔物ID = M.魔物ID
 WHERE TR.討伐日 >= CURRENT_TIMESTAMP - INTERVAL '1'
 GROUP BY M.魔物タイプID
HAVING COUNT(TR.魔物ID) >= 3 AND AVG(M.最大HP) >= 100
 ORDER BY M.魔物タイプID ASC;

 -- 問題9-4の回答
SELECT
    b.名前, b.レベル,
    LISTAGG(DISTINCT m.名前, ',')
            WITHIN GROUP (ORDER BY m.名前) AS 討伐した魔物
  FROM 討伐実績の書 tj
  JOIN 冒険者の書 b ON tj.冒険者ID = b.冒険者ID
  JOIN 魔物の書 m ON tj.魔物ID = m.魔物ID
 WHERE b.名前 IN ('ミカ', 'リナ')
 GROUP BY b.名前, b.レベル ;

-----------------
--      10章    --
-----------------
-- 10-1
-- 単純 CASE式
SELECT
  CASE 性別
    WHEN 1 THEN '男'
    WHEN 2 THEN '女'
    ELSE '不明'
  END AS 性別
FROM 冒険者の書;

-- 10-2
-- 検索 CASE式
SELECT
  CASE
    WHEN 性別 = 1 THEN '男'
    WHEN 性別 = 2 THEN '女'
    ELSE '不明'
  END AS 性別
FROM 冒険者の書;

-- 10-3
-- 検索CASE式で魔物のランクを明確にせよ！
SELECT 名前,
  CASE
    WHEN 攻撃力 >= 100 THEN 'SS'
    WHEN 攻撃力 >= 50 THEN 'S'
    WHEN 攻撃力 >= 30 THEN 'A'
    WHEN 攻撃力 >= 20 THEN 'B'
    ELSE 'C'
  END AS ランク
FROM 魔物の書

-- 10-4
-- 魔物を別名の"ランク"順で並び替える。
SELECT 名前,
  CASE
    WHEN 攻撃力 >= 100 THEN 'SS'
    WHEN 攻撃力 >= 50 THEN 'S'
    WHEN 攻撃力 >= 30 THEN 'A'
    WHEN 攻撃力 >= 20 THEN 'B'
    ELSE 'C'
  END AS ランク
 FROM 魔物の書
ORDER BY ランク;

-- 10-5
-- 魔物をCASE式で”ランク”順に並び替える
SELECT 名前,
  CASE
    WHEN 攻撃力 >= 100 THEN 'SS'
    WHEN 攻撃力 >= 50 THEN 'S'
    WHEN 攻撃力 >= 30 THEN 'A'
    WHEN 攻撃力 >= 20 THEN 'B'
    ELSE 'C'
  END AS ランク
FROM 魔物の書
  ORDER BY
    CASE
      WHEN ランク = 'SS' THEN 1
      WHEN ランク = 'S'  THEN 2
      WHEN ランク = 'A'  THEN 3
      WHEN ランク = 'B'  THEN 4
      ELSE 5
    END;

-- 10-6
-- 検索CASE式でWHEN条件の記述順間違え
SELECT 名前,
  CASE
    WHEN 攻撃力 >= 20 THEN 'B'
    WHEN 攻撃力 >= 100 THEN 'SS'
    WHEN 攻撃力 >= 50 THEN 'S'
    WHEN 攻撃力 >= 30 THEN 'A'
    ELSE 'C'
  END AS ランク
FROM 魔物の書;

-- 10-7
-- CASE式で魔物タイプ別に攻撃力を更新する。
UPDATE 魔物の書 SET
  攻撃力 =
    CASE
       WHEN 魔物タイプID = 4 OR 魔物タイプID = 10 THEN ROUND(攻撃力 * 1.10)
       WHEN 魔物タイプID = 3 THEN ROUND(攻撃力 * 1.05)
       ELSE ROUND(攻撃力 * 1.02)
    END;

-- 10-8
-- ネクロ火山に出没する魔物を検索する。　その１
SELECT
     ms.エリアID, ms.魔物ID, m.名前, m.攻撃力
  FROM 魔物出没エリアの書 ms
  JOIN 魔物の書 m ON ms.魔物ID = m.魔物ID
 WHERE ms.エリアID = 1  -- 1:ネクロ火山
 ORDER BY ms.魔物ID;

-- 10-9
-- ネクロ火山に出没する魔物を検索する。 その２
SELECT
     -- エリアIDを方角に置き換え
     CASE
       WHEN ms.エリアID in (1, 2, 3) THEN '北'
       WHEN ms.エリアID in (4, 5, 6) THEN '南'
       WHEN ms.エリアID in (7, 8, 9) THEN '東'
       WHEN ms.エリアID in (10, 11, 12) THEN '西'
       ELSE '不明'
    END AS 方角,
    ms.魔物ID, m.名前, m.攻撃力
  FROM 魔物出没エリアの書 ms
  JOIN 魔物の書 m ON ms.魔物ID = m.魔物ID
 WHERE ms.エリアID = 1  -- 1:ネクロ火山
 ORDER BY ms.魔物ID;

-- 10-10
-- ネクロ火山に出没する魔物を検索する。 その３
SELECT
     CASE
       WHEN ms.エリアID in (1, 2, 3) THEN '北'
       WHEN ms.エリアID in (4, 5, 6) THEN '南'
       WHEN ms.エリアID in (7, 8, 9) THEN '東'
       WHEN ms.エリアID in (10, 11, 12) THEN '西'
       ELSE '不明'
    END AS 方角,
    ROUND(AVG(m.攻撃力)) AS 攻撃力平均
  FROM 魔物出没エリアの書 ms
  JOIN 魔物の書 m ON ms.魔物ID = m.魔物ID
 GROUP BY
     -- エリアIDを方角に置き換え
     CASE
       WHEN ms.エリアID in (1, 2, 3) THEN '北'
       WHEN ms.エリアID in (4, 5, 6) THEN '南'
       WHEN ms.エリアID in (7, 8, 9) THEN '東'
       WHEN ms.エリアID in (10, 11, 12) THEN '西'
       ELSE '不明'
     END
 ORDER BY 方角;


 -- 問題10-1の回答
SELECT
    魔物ID, 名前,
    CASE WHEN 防御力 >= 50 AND 最大HP >= 200 THEN '高'
         WHEN 防御力 >= 25 AND 最大HP >= 100 THEN '中'
         ELSE '低'
     END AS 討伐難易度
  FROM 魔物の書
 ORDER BY 魔物ID ASC;

 -- 問題10-2の回答
SELECT
    CASE WHEN 性別 = 1 THEN '男'
         ELSE '女' -- 性別は1か2なので1以外は「女」
     END AS 性別の表示,
     AVG(レベル) AS 平均レベル
  FROM 冒険者の書
 GROUP BY
    -- GROUP BY句にも同様のCASE文で基準とする。
    CASE WHEN 性別 = 1 THEN '男'
         ELSE '女'
     END
 ORDER BY 性別の表示 ASC;

 -- 問題10-3の回答
SELECT
   B.冒険者ID, B.名前,
   CASE WHEN COUNT(TR.記録ID) >= 6 THEN 'エキスパート'
        WHEN COUNT(TR.記録ID) >= 2 THEN 'ベテラン'
        ELSE 'ルーキー'
    END 活動ランク
  FROM 冒険者の書 B
  LEFT JOIN 討伐実績の書 TR ON B.冒険者ID = TR.冒険者ID
 GROUP BY B.冒険者ID, B.名前
ORDER BY
    -- エキスパート>ベテラン>ルーキーの順にソート
    CASE WHEN COUNT(TR.記録ID) >= 6 THEN 1 -- エキスパート
         WHEN COUNT(TR.記録ID) >= 2 THEN 2 -- ベテラン
         ELSE 3                            -- ルーキー
     END, -- ランクの優先順位で昇順
     B.名前 ASC -- 同じランク内では名前の昇順


-----------------
--      11章    --
-----------------
-- 11-1
-- 最も攻撃力が高い冒険者を見つける。
SELECT
    名前, 攻撃力
  FROM 冒険者の書
 WHERE 攻撃力 = (SELECT MAX(攻撃力) FROM 冒険者の書);

-- 11-2
-- 《メインクエリ》と《サブクエリ》
SELECT
    名前, 攻撃力,
    (SELECT MAX(攻撃力) FROM 冒険者の書) AS 最高攻撃力
  FROM 冒険者の書;

-- 11-3
-- 《職業別平均攻撃力の書》があれば．．．
SELECT b1.名前, b1.職業ID, b1.攻撃力, b2.平均攻撃力
  FROM 冒険者の書 b1
  JOIN 職業別平均攻撃力の書 b2 ON b1.職業ID = b2.職業ID
 WHERE b1.攻撃力 > b2.平均攻撃力;

-- 11-4
-- 職業別に平均攻撃力を超える冒険者を絞り出せ！
SELECT b1.名前, b1.職業ID, b1.攻撃力, b2.平均攻撃力
FROM 冒険者の書 b1
JOIN (
    SELECT 職業ID, AVG(攻撃力) AS 平均攻撃力
    FROM 冒険者の書
    GROUP BY 職業ID
) b2 ON b1.職業ID = b2.職業ID
WHERE b1.攻撃力 > b2.平均攻撃力;

-- 11-5
-- SELECT句でスカラーサブクエリを使用する
SELECT
    名前, 攻撃力,
    (SELECT MAX(攻撃力) FROM 冒険者の書) AS 最高攻撃力
  FROM 冒険者の書;

-- 11-6
-- スカラーサブクエリで複数の値、行が返るとエラー
-- サブクエリで複数の値を返す
SELECT
    名前, 攻撃力,
    (SELECT MAX(攻撃力),AVG(攻撃力) FROM 冒険者の書)
  FROM 冒険者の書;

-- サブクエリで複数の行を返す
SELECT
    名前, 攻撃力,
    (SELECT 攻撃力 FROM 冒険者の書)
  FROM 冒険者の書;

-- 11-7
-- スカラーサブクエリで《職業別最高攻撃力》を取得
SELECT
    名前, 職業ID, 攻撃力,
    (SELECT MAX(攻撃力)
       FROM 冒険者の書 sq
      WHERE sq.職業ID = b.職業ID) AS 最高攻撃力
  FROM 冒険者の書 b;

-- 11-8
-- WHERE句で 《IN演算子》＋《サブクエリ》を使用する
SELECT
    名前, 攻撃力
  FROM 冒険者の書
 WHERE 職業ID IN (SELECT 職業ID FROM 職業の書
                   WHERE 職業名 IN ('戦士','魔法使い'));

-- 11-9
-- 《魔物タイプの書》に存在するタイプの魔物情報を検索する。
SELECT 名前, 攻撃力, 魔物タイプID
  FROM 魔物の書 m
 WHERE EXISTS (SELECT * FROM 魔物タイプの書 mt
                WHERE mt.魔物タイプID = m.魔物タイプID);

-- 11-10
--《魔物タイプの書》に存在しないタイプの魔物情報を検索する。
SELECT 名前, 攻撃力, 魔物タイプID
  FROM 魔物の書 m
 WHERE NOT EXISTS (SELECT * FROM 魔物タイプの書 mt
                WHERE mt.魔物タイプID = m.魔物タイプID);

-- 11-11
-- 《LEFT JOIN》 + 《IS NULL》
SELECT 名前, 攻撃力, 魔物タイプID
  FROM 魔物の書 m
  LEFT JOIN 魔物タイプの書 mt
         ON m.魔物タイプID = mt.魔物タイプID
 WHERE mt.魔物タイプID IS NULL


 -- 問題11-1の回答
 SELECT
    冒険者ID, 名前, レベル
  FROM 冒険者の書
 WHERE レベル = (SELECT MAX(レベル) FROM 冒険者の書);

 -- 問題11-2の回答
SELECT
    魔物ID, 名前, 攻撃力
  FROM 魔物の書
 WHERE 攻撃力 >= (SELECT AVG(攻撃力) FROM 魔物の書)
 ORDER BY 魔物ID ASC;

 -- 問題11-3の回答
SELECT
    B.冒険者ID, B.名前 AS 冒険者名,
    M.名前 AS 討伐した魔物の名前,TR.討伐日
  FROM 冒険者の書 B
  JOIN 討伐実績の書 TR ON B.冒険者ID = TR.冒険者ID
  JOIN 魔物の書 M ON TR.魔物ID = M.魔物ID
 WHERE M.魔物タイプID IN (SELECT 魔物タイプID
                            FROM 魔物タイプの書
                           WHERE 魔物タイプ名 = '竜族');


-----------------
--      12章    --
-----------------
-- 12-1
-- 《サブクエリー》と《WITH句》の比較
-- サブクエリー使用
SELECT a.冒険者ID, b.名前, 合計討伐数
  FROM (
    SELECT 冒険者ID, SUM(討伐数) AS 合計討伐数
      FROM 討伐実績の書
     GROUP BY 冒険者ID
  ) a
  JOIN 冒険者の書 b ON a.冒険者ID = b.冒険者ID
 WHERE 合計討伐数 > (
    SELECT AVG(小計.合計討伐数)
      FROM (
        SELECT 冒険者ID, SUM(討伐数) AS 合計討伐数
         FROM 討伐実績の書
      GROUP BY 冒険者ID
     ) 小計
   )
 ORDER BY 合計討伐数 DESC;

-- WITH句使用
WITH 冒険者別討伐数 AS (
  SELECT 冒険者ID, SUM(討伐数) AS 合計討伐数
  FROM 討伐実績の書
  GROUP BY 冒険者ID
),
平均討伐数 AS (
  SELECT AVG(合計討伐数) AS 平均値
  FROM 冒険者別討伐数
)
SELECT b.冒険者ID, b.名前, d.合計討伐数
  FROM 冒険者別討伐数 d
  JOIN 冒険者の書 b ON d.冒険者ID = b.冒険者ID
  JOIN 平均討伐数 avg ON d.合計討伐数 > avg.平均値
 ORDER BY d.合計討伐数 DESC;

-- 12-2
-- 事前に一時的な書（テーブル）を作成できる WITH句
-- 魔物の名前と総合力のカラムを持つ、
--《MONSTER》という一時的な書（テーブル）を作成
WITH MONSTER AS (
  SELECT 名前, 攻撃力+防御力 AS 総合力 FROM 魔物の書
)
-- 一時的に作成した《MONSTER》書を検索
SELECT * FROM MONSTER

-- 12-3
-- WITH句で複数の一時的な書（テーブルを）作成する

-- 魔物の名前と総合力のカラムを持つ、
--《MONSTER》という一時的な書を作る。
WITH MONSTER AS (
  SELECT 名前, 攻撃力+防御力 AS 総合力 FROM 魔物の書
) ,
-- 総合力が120以上の魔物の情報を
--《MONSTER》から取得する一時的な書を作る。
STRONG_MONSTER AS (
  SELECT 名前, 総合力 FROM MONSTER
   WHERE 総合力 >= 120
)
-- 《STRONG_MONSTER》一時の書を検索する。
SELECT * FROM STRONG_MONSTER

-- 12-4
-- WITH句を定義したクエリ内だけで《一時テーブル》は使用可能。
WITH TMP AS (
  SELECT 名前 || 'さん' AS 冒険者名 FROM 冒険者の書
) SELECT * FROM TMP;
SELECT * FROM TMP;


 -- 問題12-1の回答
 WITH MonsterAVG AS (
    SELECT
        魔物タイプID,
　　　　AVG(攻撃力) AS 平均攻撃力,
        AVG(防御力) AS 平均防御力
      FROM 魔物の書
     GROUP BY 魔物タイプID
)
SELECT * FROM MonsterAVG
 ORDER BY 魔物タイプID;

 -- 問題12-2の回答
 WITH MonsterAVG AS (
    SELECT
        魔物タイプID,
　　　　AVG(攻撃力) AS 平均攻撃力,
        AVG(防御力) AS 平均防御力
      FROM 魔物の書
     GROUP BY 魔物タイプID
)
SELECT
    m.魔物タイプID, m.名前, m.攻撃力, m.防御力,
    ma.平均攻撃力,  ma.平均防御力
  FROM 魔物の書 m
  JOIN MonsterAVG ma
    ON COALESCE(m.魔物タイプID, 0) = COALESCE(ma.魔物タイプID, 0)
 WHERE m.攻撃力 > ma.平均攻撃力
   AND m.防御力 > ma.平均防御力
 ORDER BY 1, 2;


-----------------
--      13章    --
-----------------
-- 13-1
-- 個々の攻撃力と《魔物タイプ》別に平均攻撃力を検索　 《サブクエリ》
SELECT
    魔物タイプID,名前,攻撃力,
    (SELECT AVG(攻撃力) FROM 魔物の書 sq
      WHERE sq.魔物タイプID = mq.魔物タイプID) 平均攻撃力
  FROM 魔物の書 mq
 ORDER BY 魔物タイプID, 攻撃力


-- 13-2
-- ウィンドウ関数： OVER句のオプション指定なし
SELECT
    SUM(攻撃力) OVER() AS 総攻撃力
  FROM 魔物の書;

-- 13-3
-- 集計関数を使用した場合
SELECT
    SUM(攻撃力) AS 総攻撃力
  FROM 魔物の書;

-- 13-4
-- PARTITION BY　で仕切る術
SELECT
    魔物タイプID,名前,攻撃力,
    AVG(攻撃力) OVER (PARTITION BY 魔物タイプID) 平均攻撃力
  FROM 魔物の書 mq
 ORDER BY 魔物タイプID, 攻撃力;

-- 13-5
-- ORDER BYで“累積の順”を定める。（攻撃力順に累積）
SELECT
    名前, 攻撃力,
    SUM(攻撃力) OVER(ORDER BY 攻撃力) AS 累積攻撃力
  FROM 魔物の書;

-- 13-6
-- ORDER BYで“累積の順”を定める。（一意の列を追加して《同順》を排除）
SELECT
    名前, 攻撃力,
    SUM(攻撃力) OVER(ORDER BY 攻撃力, 魔物ID) AS 累積攻撃力
  FROM 魔物の書;

-- 13-7
-- RANK+ORDER BYで“攻撃力ランク”を定める。
SELECT
    名前, 攻撃力,
    RANK() OVER(ORDER BY 攻撃力) AS 攻撃力ランク
  FROM 魔物の書;

-- 13-8
-- 3兄弟のランクを同時に確認
SELECT
    名前, 攻撃力,
    RANK() OVER(ORDER BY 攻撃力) AS RANK,
    DENSE_RANK() OVER(ORDER BY 攻撃力) AS DENSE_RANK,
    ROW_NUMBER() OVER(ORDER BY 攻撃力) AS ROW_NUMBER
  FROM 魔物の書;

-- 13-9
-- 攻撃力の下位3体を抽出（ROW_NUMBERを使用）
WITH ranked AS (
  SELECT
    名前,攻撃力,
    ROW_NUMBER() OVER (ORDER BY 攻撃力) AS ランク
  FROM 魔物の書
)
SELECT * FROM ranked
 WHERE ランク <= 3;

-- 13-10
-- 《PATITION BY》と《ORDER BY》の合わせ技 （集計関数編）
SELECT
    魔物タイプID,名前,攻撃力,
    SUM(攻撃力) OVER (PARTITION BY 魔物タイプID ORDER BY 攻撃力) AS 累積攻撃力
  FROM 魔物の書;

-- 13-11
-- 攻撃力の上位3体を抽出《ORDER BY》+《FETCH》
SELECT
  名前,攻撃力
  FROM 魔物の書
 ORDER BY 攻撃力 DESC
 FETCH FIRST 3 ROWS ONLY;

-- 13-12
-- 攻撃力が下位6～8位の魔物を検索する。
 《ORDER BY》+《OFFSET》＋《FETCH》
SELECT
    名前, 攻撃力
  FROM 魔物の書
 ORDER BY 攻撃力 ASC
 OFFSET 5 ROWS
 FETCH NEXT 3 ROWS ONLY;

 -- 問題13-1の回答
 SELECT
    魔物ID, 名前, 攻撃力,
    SUM(攻撃力) OVER () AS 総攻撃力
  FROM 魔物の書
 ORDER BY 魔物ID;

 -- 問題13-2の回答
SELECT
    魔物タイプID, 名前, 攻撃力,
    AVG(攻撃力)
     OVER (PARTITION BY 魔物タイプID) AS 魔物タイプ別平均攻撃力
  FROM 魔物の書
 ORDER BY 魔物タイプID ASC, 攻撃力 DESC;

-----------------
--      14章    --
-----------------
-- 14-1
-- 《冒険の書》を作成するSQL呪文
CREATE TABLE 冒険者の書 (
    冒険者ID NUMBER,                      -- 冒険者の一意識別子
    名前 VARCHAR2(50) NOT NULL,           -- 冒険者の名前（NULL禁止）
    性別 NUMBER(1) CHECK (性別 IN (1, 2)) NOT NULL,  -- 1: 男, 2: 女
    職業ID NUMBER NOT NULL,               -- 冒険者の職業ID（外部キー）
    レベル NUMBER CHECK (レベル > 0) ,    -- レベル（1以上）
    攻撃力 NUMBER CHECK (攻撃力 >= 0) ,   -- 攻撃力（0以上）
    守備力 NUMBER CHECK (守備力 >= 0),    -- 守備力（0以上）
    最大HP NUMBER CHECK (最大HP > 0) ,    -- 最大HP（1以上）
    最大MP NUMBER CHECK (最大MP >= 0) ,   -- 最大MP（0以上）
    コードネーム VARCHAR2(50),            -- コードネーム (NULL許容)
    識別コード CHAR(11),                  -- 性別1桁+生年月日8桁+種族コード2桁
    登録日 DATE DEFAULT SYSDATE NOT NULL, -- 登録日（デフォで現在日付）
    CONSTRAINT 冒険者の書PK PRIMARY KEY (冒険者ID), -- 主キー制約
    CONSTRAINT 冒険者の書FK1 FOREIGN KEY (職業ID) REFERENCES 職業の書 (職業ID) -- 外部キー
);

-- 14-2
-- 《冒険の書》に登録（挿入）：　複数行を一括で登録する。
INSERT INTO 冒険者の書
  (冒険者ID,名前,性別,職業ID)
VALUES
  (201, 'アルバ', 1, 1),
  (202, 'ミーナ', 2, 3),
  (203, 'ゼロス', 1, 4);

-- 14-3
-- 《冒険の書》に登録（挿入）：　列名省略
INSERT INTO 冒険者の書 (
   121, 'ライナ', 2, 2, 3, 72, 44, 310, 180, 'F20051208EL', CURRENT_DATE
);

-- 14-4
-- 《冒険の書》に登録（挿入）：　複数行を一括で登録する。(Oracleではエラー)
INSERT INTO 冒険者の書
  (冒険者ID, 名前, 性別, 職業ID, 登録日)
VALUES
  (201, 'アルバ', 1, 1, CURRENT_DATE),
  (202, 'ミーナ', 2, 3, CURRENT_DATE),
  (203, 'ゼロス', 1, 4, CURRENT_DATE);

-- 14-5
-- 《冒険の書》に登録（挿入）：　複数行を一括で登録する。　（Oracle系統の守護者向け）
INSERT ALL
  INTO 冒険者の書 (冒険者ID,名前,性別,職業ID,登録日) VALUES (201, 'アルバ', 1, 1, CURRENT_DATE)
  INTO 冒険者の書 (冒険者ID,名前,性別,職業ID,登録日) VALUES (202, 'ミーナ', 2, 3, CURRENT_DATE)
  INTO 冒険者の書 (冒険者ID,名前,性別,職業ID,登録日) VALUES (203, 'ゼロス', 1, 4, CURRENT_DATE)
SELECT * FROM DUAL;

-- 14-6
-- 《上級冒険者の書》にLV30以上の冒険者の情報を登録する。
INSERT INTO 上級冒険者の書 (冒険者ID, 名前, レベル)
   SELECT 冒険者ID, 名前, レベル FROM 冒険者の書
    WHERE レベル >= 30;

-- 14-7
-- 登録後に《上級冒険者の書》を確認する。
SELECT * FROM 上級冒険者の書;

-- 14-8
-- 《魔物の書_更新前》のデータを削除する。
DELETE FROM 魔物の書_更新前;

-- 更新前の情報を《魔物の書_更新前》に残す。
INSERT INTO 魔物の書_更新前 (魔物ID, 防御力)
   SELECT 魔物ID, 防御力 FROM 魔物の書
    WHERE 魔物タイプID = 5;

-- 14-9
-- 《魔物の書》の攻撃力をメンテナンスする。
UPDATE 魔物の書
   SET 防御力 = 防御力 * 1.1
 WHERE 魔物タイプID = 5;

-- 14-10
-- 上層部に提出する資料を作成する。
SELECT
  bf.魔物ID,
  bf.防御力 AS 更新前防御力,
  af.防御力 AS 更新後防御力
FROM 魔物の書_更新前 bf
JOIN 魔物の書 af ON bf.魔物ID = af.魔物ID;

-- 14-11
--《冒険者の書》の冒険者ID用のシーケンスを作成する。
CREATE SEQUENCE SEQ_冒険者ID;

-- 14-12
-- シーケンスを使用して登録する。
INSERT INTO 冒険者の書 (
   冒険者ID, 名前, 性別, 職業ID, 識別コード
) VALUES (
   SEQ_冒険者ID.NEXTVAL, 'ライナ', 2, 2, 'F20051208EL'
);

-- 14-13
-- 魔法使いライナのコードネームを変更する。
UPDATE 冒険者の書
   SET コードネーム = 'Felina'
 WHERE 冒険者ID = 121;

-- 14-14
-- 魔法使いライナの攻撃力等を変更する。
UPDATE 冒険者の書 SET
    レベル = 5,
    攻撃力 = 20,
    守備力 = 20,
    最大HP = 85,
    最大MP = 200
 WHERE 冒険者ID = 121;

-- 14-15
-- 別の書（テーブル）のデータと連動して更新する。
UPDATE 冒険者の書 b SET
    攻撃力 = 攻撃力 * 1.1,
    防御力 = 防御力 * 1.1
 WHERE EXISTS (SELECT * FROM 上級冒険者の書 jb
                WHERE jb.冒険者ID = b.冒険者ID);

-- 14-16
-- 戦士レオンの討伐記録を削除する。
 DELETE FROM 討伐実績の書
  WHERE 冒険者ID = 101 -- 101:レオン
    AND 魔物ID = 2     -- 2:スライム
    AND 討伐日 = '2025-04-05';

-- 14-17
-- 削除する前に、削除する内容と件数を確認する。
SELECT * FROM 討伐実績の書
  WHERE 冒険者ID = 101 -- 101:レオン
    AND 魔物ID = 2     -- 2:スライム
    AND 討伐日 = '2025-04-05';

-- 14-18
-- TRUNCATE TALBEの基本詠唱例
TRUNCATE TABLE 魔物の書_更新前;

-- 14-19
-- 複数のDML処理をひとかたまりにして扱う　（トランザクション）
-- トランザクション開始
START TRANSACTION;
-- 更新処理1
UPDATE 魔物の書 SET 攻撃力 = 攻撃力 * 3 WHERE 魔物タイプID = 5;
-- 更新処理2
UPDATE 魔物の書 SET 守備力 = 守備力 * 2 WHERE 魔物タイプID = 3;
-- 間違いなければ、確定
COMMIT;
-- もし間違っていれば、取消
-- ROLLBACK;

-- 14-20
-- 1. トランザクションの開始
BEGIN TRANSACTION; -- 我がOracle系統の守護者では不要
-- 2.1 《口座の書》の残高を更新（バルドの口座ID：３）
UPDATE 口座の書
   SET 残高 = 残高 + 100
 WHERE 口座ID = 3;
-- 2.2 《口座取引の書》に取引履歴を記録（入金記録を追加）
INSERT INTO 口座取引の書 (
    取引ID, 口座ID, 取引日時, ゴールド, 摘要
) VALUES (
    2001, 3, CURRENT_DATE, 100, '任務報酬の入金'
);
-- 3. 全ての処理が成功したら確定
COMMIT;


 -- 問題14-1の回答
INSERT INTO 冒険者の書 (
    冒険者ID, 名前, 性別, 職業ID
) VALUES (
    131, 'シルビア', 2, 2
);

-- 14-21
-- バルドの口座情報の確認
SELECT * FROM 口座の書
 WHERE 口座ID = 3
-- 取引履歴を確認
SELECT * FROM 口座取引の書
 WHERE 取引ID = 2001;

 -- 問題14-2の回答
INSERT INTO 魔物の書 (
    魔物ID, 名前, 攻撃力, 防御力, 最大HP, 最大MP, 魔物タイプID, 登録日
) SELECT
      魔物ID + 50 AS 魔物ID,
      名前 || '亜種' AS 名前, -- または CONCAT(名前, '亜種') などRDBに応じて
      攻撃力 * 2 AS 攻撃力,
      防御力 * 2 AS 防御力,
      最大HP * 2 AS 最大HP,
      最大MP * 2 AS 最大MP,
      魔物タイプID,
      CURRENT_DATE AS 登録日
    FROM 魔物の書
   WHERE 名前 LIKE '%ゴブリン%'; -- 名前に「ゴブリン」が含まれる魔物を対象

 -- 問題14-3の回答
UPDATE 冒険者の書
   SET レベル = 35
 WHERE 冒険者ID = 102;

 -- 問題14-4の回答
UPDATE 冒険者の書 b SET
    コードネーム = CASE WHEN レベル >= 35 THEN
                             'Sir' || コードネーム
                        ELSE コードネーム
                   END,
    最大HP = 最大HP + 10
 WHERE EXISTS (SELECT * FROM 上級冒険者の書 jb
                WHERE jb.冒険者ID = b.冒険者ID) ;

 -- 問題14-5の回答
 DELETE FROM 冒険者の書
 WHERE 冒険者ID = 103;


-----------------
--      15章    --
-----------------
-- 15-1
-- セット演算使用時の結果の列名とORDER BYの記述場所
SELECT 魔物タイプID, 魔物タイプ名 FROM 魔物タイプの書
UNION
SELECT 職業ID, 職業名 FROM 職業の書
UNION
SELECT 技ID, 技名 FROM 技の書
 ORDER BY 1

-- 15-1
-- UNION / UNION ALL の違いを理解する。
-- UNION使用
SELECT 'ゴブリン' AS 名前, 100 AS 攻撃力
UNION
SELECT 'ゴブリン', 100;

-- UNION ALL使用
SELECT 'ゴブリン' AS 名前, 100 AS 攻撃力
UNION ALL
SELECT 'ゴブリン', 100;

-- UNION / UNION ALL の違いを理解する。(For Oracle)
-- UNION使用
SELECT 'ゴブリン' AS 名前, 100 AS 攻撃力 FROM DUAL
UNION
SELECT 'ゴブリン', 100 FROM DUAL;

-- UNION ALL使用
SELECT 'ゴブリン' AS 名前, 100 AS 攻撃力 FROM DUAL
UNION ALL
SELECT 'ゴブリン', 100 FROM DUAL;

-- 15-2
-- 実践：異なるデータを統合し比較する UNIONの力
SELECT 名前, 攻撃力, '冒険者' AS 区分 FROM 冒険者の書
 UNION ALL
SELECT 名前, 攻撃力, '魔物' FROM 魔物の書
 ORDER BY 攻撃力 DESC  -- ORDER BYは最後に！

-- 15-3
-- 更新前の情報をバックアップして、防御力を一括更新。
-- 《魔物の書_更新前》のデータを削除する。
DELETE FROM 魔物の書_更新前;
-- 更新前のデータを《魔物の書_更新前》に退避する。
INSERT INTO 魔物の書_更新前 (
      魔物ID, 防御力, 魔物タイプID
) SELECT
      魔物ID, 防御力, 魔物タイプID FROM 魔物の書
    WHERE 魔物タイプID = 3;
-- 獣の防御力を２倍に更新
UPDATE 魔物の書
   SET 防御力 = 防御力 * 2
 WHERE 魔物タイプID = 3;    -- 3:獣

-- 15-4
-- 更新前後で変化のあった行を検索する。　（EXCEPT）
SELECT 魔物タイプID, 魔物ID, 防御力 FROM 魔物の書_更新前
 MINUS    -- EXCEPTの代わり
SELECT 魔物タイプID, 魔物ID, 防御力 FROM 魔物の書

-- 15-5
-- 正しく2倍に更新されているか確認する。　（INTERSECT）
-- 防御力が２倍に更新されているかを確認する。
SELECT 魔物タイプID, 魔物ID, 防御力 * 2 FROM 魔物の書_更新前
 INTERSECT
SELECT 魔物タイプID, 魔物ID, 防御力 FROM 魔物の書


 -- 問題15-1の回答
SELECT 魔物タイプID, 名前, 攻撃力, 防御力
  FROM 調整前_魔物の書
 UNION ALL
SELECT 魔物タイプID, 名前, 攻撃力, 防御力
  FROM 魔物の書
 ORDER BY 魔物タイプID, 名前;

 -- 問題15-2の回答
SELECT 魔物タイプID, 名前, 攻撃力, 防御力
  FROM 調整前_魔物の書
 EXCEPT             -- Oracleでは MINUS使用
SELECT 魔物タイプID, 名前, 攻撃力, 防御力
  FROM 魔物の書
 ORDER BY 魔物タイプID, 名前;
